name: Parse Stock Data with Claude

on:
  push:
    paths:
      - 'stock_analysis.json'
  workflow_dispatch:

jobs:
  parse:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Parse with Claude API
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          node << 'NODESCRIPT'
          const fs = require('fs');
          
          async function callClaude(rawText, ticker) {
            const cleanText = rawText.substring(0, 40000);
            
            const prompt = "Tu es un analyste financier expert. Analyse ce contenu Seeking Alpha Virtual Analyst Report.\n\n" +
              "IMPORTANT: Ta réponse doit être UNIQUEMENT du JSON valide. Pas de texte avant, pas de texte après, pas de markdown, pas de backticks.\n\n" +
              "STRUCTURE REQUISE (rapport complet comme exemple JNJ):\n" +
              "1. Métriques: capitalisation, BPA, P/E, secteur, dividende (rendement, fréquence, ex-date, paiement)\n" +
              "2. Profil entreprise: description détaillée, employés, innovation\n" +
              "3. Concurrence: concurrents, proposition valeur, avantages\n" +
              "4. Quant Ratings: valuation, growth, profitability, momentum, revisions (notes A+/A/A-/B+/B/B-/C+/C/C-/D+/D/D-/F)\n" +
              "5. Analyse sectorielle: comparaison détaillée vs secteur pour chaque métrique\n" +
              "6. Conclusion intermédiaire: synthèse + recommandation\n" +
              "7. Points positifs: 3 points détaillés\n" +
              "8. Préoccupations: 3 points détaillés\n" +
              "9. Conclusion finale: forces, faiblesses, recommandation\n\n" +
              "CONTENU:\n" + cleanText + "\n\n" +
              "RETOURNE CE JSON EXACT (rempli avec les données):\n" +
              JSON.stringify({
                ticker: ticker,
                companyName: "",
                lastUpdate: new Date().toISOString(),
                metrics: {
                  marketCap: "",
                  bpaGrowth: "",
                  peRatio: "",
                  sector: "",
                  dividendYield: "",
                  dividendFrequency: "",
                  exDivDate: "",
                  annualPayout: "",
                  price: "",
                  priceChange: ""
                },
                companyProfile: {
                  description: "",
                  employees: "",
                  innovation: ""
                },
                competition: {
                  competitors: [],
                  valueProposition: "",
                  advantages: ""
                },
                quantRating: {
                  valuation: "",
                  growth: "",
                  profitability: "",
                  momentum: "",
                  revisions: ""
                },
                sectorAnalysis: {
                  valuation: "",
                  growth: "",
                  profitability: "",
                  momentum: "",
                  revisions: ""
                },
                intermediateConclusion: "",
                strengths: ["", "", ""],
                concerns: ["", "", ""],
                finalConclusion: {
                  strengths: "",
                  weaknesses: "",
                  recommendation: "",
                  rating: "Hold"
                }
              }, null, 2);

            const response = await fetch("https://api.anthropic.com/v1/messages", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "x-api-key": process.env.ANTHROPIC_API_KEY,
                "anthropic-version": "2023-06-01"
              },
              body: JSON.stringify({
                model: "claude-sonnet-4-20250514",
                max_tokens: 4096,
                messages: [{ role: "user", content: prompt }]
              })
            });

            if (!response.ok) {
              const error = await response.text();
              throw new Error("API " + response.status + ": " + error);
            }
            
            const data = await response.json();
            let text = data.content[0].text;
            
            // Forcer le décodage UTF-8
            text = decodeURIComponent(escape(text));
            
            // Nettoyage agressif
            text = text.replace(/```json\n?/g, "");
            text = text.replace(/```\n?/g, "");
            text = text.replace(/^#.*$/gm, "");
            text = text.trim();
            
            // Extraire le JSON entre le premier { et le dernier }
            const firstBrace = text.indexOf('{');
            const lastBrace = text.lastIndexOf('}');
            
            if (firstBrace === -1 || lastBrace === -1) {
              throw new Error("Pas de JSON trouvé dans la réponse");
            }
            
            text = text.substring(firstBrace, lastBrace + 1);
            
            return JSON.parse(text);
          }

          async function main() {
            console.log("Lecture stock_analysis.json...");
            const stockAnalysis = JSON.parse(fs.readFileSync('stock_analysis.json', 'utf8'));
            const parsedStocks = {};

            for (const stock of stockAnalysis.stocks) {
              if (stock.raw_text) {
                console.log("Parsing " + stock.ticker + "...");
                try {
                  const parsed = await callClaude(stock.raw_text, stock.ticker);
                  parsedStocks[stock.ticker] = parsed;
                  console.log("Succès " + stock.ticker);
                  await new Promise(r => setTimeout(r, 3000));
                } catch (error) {
                  console.error("Erreur " + stock.ticker + ":", error.message);
                  parsedStocks[stock.ticker] = { 
                    ticker: stock.ticker, 
                    error: error.message,
                    scrapedAt: new Date().toISOString()
                  };
                }
              }
            }

            fs.writeFileSync('stock_data.json', JSON.stringify({
              lastUpdate: new Date().toISOString(),
              stocks: parsedStocks
            }, null, 2), 'utf8');
            console.log("Terminé!");
          }

          main().catch(err => { 
            console.error("Erreur fatale:", err); 
            process.exit(1); 
          });
          NODESCRIPT
      
      - name: Commit updated data
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add stock_data.json
          git diff --quiet && git diff --staged --quiet || git commit -m "Rapport auto-généré"
          git push
