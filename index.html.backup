<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Seeking Alpha Dashboard</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div id="root"></div>
    
    <script type="text/babel">
        const { useState, useEffect } = React;
        
        const RefreshIcon = ({ className, spinning }) => (
            <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
        );
        
        const TrendingUpIcon = ({ className }) => (
            <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
            </svg>
        );
        
        const TrendingDownIcon = ({ className }) => (
            <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 17h8m0 0V9m0 8l-8-8-4 4-6-6" />
            </svg>
        );
        
        const AlertIcon = ({ className }) => (
            <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
        );

        function Dashboard() {
            const [data, setData] = useState(null);
            const [loading, setLoading] = useState(true);
            const [error, setError] = useState(null);
            const [lastUpdate, setLastUpdate] = useState(null);

            const fetchData = async () => {
                setLoading(true);
                setError(null);
                
                try {
                    const timestamp = new Date().getTime();
                    const response = await fetch(`./stock_analysis.json?t=${timestamp}`);
                    
                    if (!response.ok) {
                        throw new Error(`Erreur ${response.status}`);
                    }
                    
                    const jsonData = await response.json();
                    setData(jsonData);
                    setLastUpdate(new Date(jsonData.last_update));
                } catch (err) {
                    setError(err.message);
                } finally {
                    setLoading(false);
                }
            };

            useEffect(() => {
                fetchData();
                const interval = setInterval(fetchData, 60000);
                return () => clearInterval(interval);
            }, []);

            const formatDate = (date) => {
                if (!date) return 'N/A';
                return date.toLocaleString('fr-FR', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            };

            if (loading && !data) {
                return (
                    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 flex items-center justify-center">
                        <div className="text-center">
                            <RefreshIcon className="w-12 h-12 text-blue-400 animate-spin mx-auto mb-4" spinning />
                            <p className="text-gray-300 text-lg">Chargement des données...</p>
                        </div>
                    </div>
                );
            }

            if (error) {
                return (
                    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 flex items-center justify-center p-4">
                        <div className="bg-red-900/20 border border-red-500 rounded-lg p-6 max-w-md">
                            <AlertIcon className="w-12 h-12 text-red-400 mx-auto mb-4" />
                            <h2 className="text-xl font-bold text-red-300 mb-2 text-center">Erreur</h2>
                            <p className="text-gray-300 text-center mb-4">{error}</p>
                            <button
                                onClick={fetchData}
                                className="w-full bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
                            >
                                Réessayer
                            </button>
                        </div>
                    </div>
                );
            }

            return (
                <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 p-6">
                    <div className="max-w-6xl mx-auto">
                        <div className="mb-8">
                            <div className="flex items-center justify-between mb-4">
                                <h1 className="text-4xl font-bold text-white">Seeking Alpha Dashboard</h1>
                                <button
                                    onClick={fetchData}
                                    disabled={loading}
                                    className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors"
                                >
                                    <RefreshIcon className={`w-5 h-5 ${loading ? 'animate-spin' : ''}`} />
                                    Actualiser
                                </button>
                            </div>
                            
                            <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700">
                                <p className="text-gray-300">
                                    <span className="font-semibold">Dernière mise à jour :</span> {formatDate(lastUpdate)}
                                </p>
                            </div>
                        </div>

                        {data?.stocks && data.stocks.length > 0 ? (
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                {data.stocks.map((stock, index) => (
                                    <div
                                        key={index}
                                        className="bg-slate-800 rounded-lg p-6 border border-slate-700 hover:border-blue-500 transition-all hover:shadow-lg hover:shadow-blue-500/20"
                                    >
                                        <div className="flex items-start justify-between mb-4">
                                            <div>
                                                <h2 className="text-2xl font-bold text-white mb-1">{stock.ticker}</h2>
                                                <p className="text-sm text-gray-400">
                                                    {new Date(stock.timestamp).toLocaleString('fr-FR', {
                                                        day: '2-digit',
                                                        month: 'short',
                                                        hour: '2-digit',
                                                        minute: '2-digit'
                                                    })}
                                                </p>
                                            </div>
                                            {stock.change && stock.change !== 'N/A' && stock.change !== 'DEMO' && (
                                                <div className={`flex items-center gap-1 ${
                                                    stock.change.includes('-') ? 'text-red-400' : 'text-green-400'
                                                }`}>
                                                    {stock.change.includes('-') ? (
                                                        <TrendingDownIcon className="w-5 h-5" />
                                                    ) : (
                                                        <TrendingUpIcon className="w-5 h-5" />
                                                    )}
                                                </div>
                                            )}
                                        </div>

                                        <div className="space-y-3">
                                            <div>
                                                <p className="text-gray-400 text-sm mb-1">Prix</p>
                                                <p className="text-3xl font-bold text-white">
                                                    {stock.price === 'DEMO' ? (
                                                        <span className="text-yellow-400 text-lg">MODE DEMO</span>
                                                    ) : (
                                                        stock.price
                                                    )}
                                                </p>
                                            </div>

                                            {stock.change && stock.change !== 'N/A' && stock.change !== 'DEMO' && (
                                                <div>
                                                    <p className="text-gray-400 text-sm mb-1">Variation</p>
                                                    <p className={`text-xl font-semibold ${
                                                        stock.change.includes('-') ? 'text-red-400' : 'text-green-400'
                                                    }`}>
                                                        {stock.change}
                                                    </p>
                                                </div>
                                            )}

                                            {stock.note && (
                                                <div className="mt-4 pt-3 border-t border-slate-700">
                                                    <p className="text-yellow-400 text-xs">{stock.note}</p>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div className="bg-slate-800 rounded-lg p-12 text-center border border-slate-700">
                                <AlertIcon className="w-16 h-16 text-gray-500 mx-auto mb-4" />
                                <p className="text-gray-400 text-lg">Aucune donnée disponible</p>
                            </div>
                        )}
                    </div>
                </div>
            );
        }

        ReactDOM.render(<Dashboard />, document.getElementById('root'));
    </script>
</body>
</html>
